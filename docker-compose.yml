version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: workflow-postgres
    environment:
      POSTGRES_DB: workflow_engine
      POSTGRES_USER: workflow_user
      POSTGRES_PASSWORD: workflow_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workflow_user -d workflow_engine"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - workflow-network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: workflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - workflow-network

  # Main FastAPI Application
  app:
    build: .
    container_name: workflow-app
    environment:
      - DATABASE_URL=postgresql://workflow_user:workflow_password@postgres:5432/workflow_engine
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - N8N_BASE_URL=http://n8n:5678
      - N8N_API_KEY=your-n8n-api-key
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - workflow-network
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build: .
    container_name: workflow-celery-worker
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://workflow_user:workflow_password@postgres:5432/workflow_engine
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - N8N_BASE_URL=http://n8n:5678
      - N8N_API_KEY=your-n8n-api-key
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - workflow-network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build: .
    container_name: workflow-celery-beat
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://workflow_user:workflow_password@postgres:5432/workflow_engine
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - N8N_BASE_URL=http://n8n:5678
      - N8N_API_KEY=your-n8n-api-key
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - workflow-network
    restart: unless-stopped

  # Celery Flower (Monitoring)
  celery-flower:
    build: .
    container_name: workflow-celery-flower
    command: celery -A app.celery_app flower --port=5555
    environment:
      - DATABASE_URL=postgresql://workflow_user:workflow_password@postgres:5432/workflow_engine
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - workflow-network
    restart: unless-stopped

  # n8n (Optional - for integration testing)
  n8n:
    image: n8nio/n8n:latest
    container_name: workflow-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - workflow-network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: workflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - workflow-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  n8n_data:

networks:
  workflow-network:
    driver: bridge